// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: msg_services.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_msg_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_msg_services_proto_rawDescGZIP(), []int{0}
}

var File_msg_services_proto protoreflect.FileDescriptor

var file_msg_services_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0a, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x97, 0x03,
	0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x52, 0x0a, 0x11, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x19, 0x2e, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x16, 0x49, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x4e,
	0x65, 0x77, 0x48, 0x65, 0x61, 0x76, 0x69, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x4e,
	0x65, 0x77, 0x48, 0x65, 0x61, 0x76, 0x69, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1b, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x1a, 0x19, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x2d, 0x74, 0x78, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_msg_services_proto_rawDescOnce sync.Once
	file_msg_services_proto_rawDescData = file_msg_services_proto_rawDesc
)

func file_msg_services_proto_rawDescGZIP() []byte {
	file_msg_services_proto_rawDescOnce.Do(func() {
		file_msg_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_msg_services_proto_rawDescData)
	})
	return file_msg_services_proto_rawDescData
}

var file_msg_services_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_msg_services_proto_goTypes = []interface{}{
	(*EmptyResponse)(nil),             // 0: relayproto.EmptyResponse
	(*MsgIngestHeaderChain)(nil),      // 1: relayproto.MsgIngestHeaderChain
	(*MsgIngestDifficultyChange)(nil), // 2: relayproto.MsgIngestDifficultyChange
	(*MsgMarkNewHeaviest)(nil),        // 3: relayproto.MsgMarkNewHeaviest
	(*MsgNewRequest)(nil),             // 4: relayproto.MsgNewRequest
	(*MsgProvideProof)(nil),           // 5: relayproto.MsgProvideProof
}
var file_msg_services_proto_depIdxs = []int32{
	1, // 0: relayproto.Msg.IngestHeaderChain:input_type -> relayproto.MsgIngestHeaderChain
	2, // 1: relayproto.Msg.IngestDifficultyChange:input_type -> relayproto.MsgIngestDifficultyChange
	3, // 2: relayproto.Msg.MarkNewHeaviest:input_type -> relayproto.MsgMarkNewHeaviest
	4, // 3: relayproto.Msg.NewRequest:input_type -> relayproto.MsgNewRequest
	5, // 4: relayproto.Msg.ProvideProof:input_type -> relayproto.MsgProvideProof
	0, // 5: relayproto.Msg.IngestHeaderChain:output_type -> relayproto.EmptyResponse
	0, // 6: relayproto.Msg.IngestDifficultyChange:output_type -> relayproto.EmptyResponse
	0, // 7: relayproto.Msg.MarkNewHeaviest:output_type -> relayproto.EmptyResponse
	0, // 8: relayproto.Msg.NewRequest:output_type -> relayproto.EmptyResponse
	0, // 9: relayproto.Msg.ProvideProof:output_type -> relayproto.EmptyResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_msg_services_proto_init() }
func file_msg_services_proto_init() {
	if File_msg_services_proto != nil {
		return
	}
	file_msgs_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_msg_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msg_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_msg_services_proto_goTypes,
		DependencyIndexes: file_msg_services_proto_depIdxs,
		MessageInfos:      file_msg_services_proto_msgTypes,
	}.Build()
	File_msg_services_proto = out.File
	file_msg_services_proto_rawDesc = nil
	file_msg_services_proto_goTypes = nil
	file_msg_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	IngestHeaderChain(ctx context.Context, in *MsgIngestHeaderChain, opts ...grpc.CallOption) (*EmptyResponse, error)
	IngestDifficultyChange(ctx context.Context, in *MsgIngestDifficultyChange, opts ...grpc.CallOption) (*EmptyResponse, error)
	MarkNewHeaviest(ctx context.Context, in *MsgMarkNewHeaviest, opts ...grpc.CallOption) (*EmptyResponse, error)
	NewRequest(ctx context.Context, in *MsgNewRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ProvideProof(ctx context.Context, in *MsgProvideProof, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) IngestHeaderChain(ctx context.Context, in *MsgIngestHeaderChain, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/relayproto.Msg/IngestHeaderChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IngestDifficultyChange(ctx context.Context, in *MsgIngestDifficultyChange, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/relayproto.Msg/IngestDifficultyChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarkNewHeaviest(ctx context.Context, in *MsgMarkNewHeaviest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/relayproto.Msg/MarkNewHeaviest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewRequest(ctx context.Context, in *MsgNewRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/relayproto.Msg/NewRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProvideProof(ctx context.Context, in *MsgProvideProof, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/relayproto.Msg/ProvideProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	IngestHeaderChain(context.Context, *MsgIngestHeaderChain) (*EmptyResponse, error)
	IngestDifficultyChange(context.Context, *MsgIngestDifficultyChange) (*EmptyResponse, error)
	MarkNewHeaviest(context.Context, *MsgMarkNewHeaviest) (*EmptyResponse, error)
	NewRequest(context.Context, *MsgNewRequest) (*EmptyResponse, error)
	ProvideProof(context.Context, *MsgProvideProof) (*EmptyResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) IngestHeaderChain(context.Context, *MsgIngestHeaderChain) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestHeaderChain not implemented")
}
func (*UnimplementedMsgServer) IngestDifficultyChange(context.Context, *MsgIngestDifficultyChange) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestDifficultyChange not implemented")
}
func (*UnimplementedMsgServer) MarkNewHeaviest(context.Context, *MsgMarkNewHeaviest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNewHeaviest not implemented")
}
func (*UnimplementedMsgServer) NewRequest(context.Context, *MsgNewRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRequest not implemented")
}
func (*UnimplementedMsgServer) ProvideProof(context.Context, *MsgProvideProof) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvideProof not implemented")
}

func RegisterMsgServer(s *grpc.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_IngestHeaderChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIngestHeaderChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IngestHeaderChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Msg/IngestHeaderChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IngestHeaderChain(ctx, req.(*MsgIngestHeaderChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IngestDifficultyChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIngestDifficultyChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IngestDifficultyChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Msg/IngestDifficultyChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IngestDifficultyChange(ctx, req.(*MsgIngestDifficultyChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarkNewHeaviest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarkNewHeaviest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarkNewHeaviest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Msg/MarkNewHeaviest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarkNewHeaviest(ctx, req.(*MsgMarkNewHeaviest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Msg/NewRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewRequest(ctx, req.(*MsgNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProvideProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProvideProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProvideProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayproto.Msg/ProvideProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProvideProof(ctx, req.(*MsgProvideProof))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relayproto.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestHeaderChain",
			Handler:    _Msg_IngestHeaderChain_Handler,
		},
		{
			MethodName: "IngestDifficultyChange",
			Handler:    _Msg_IngestDifficultyChange_Handler,
		},
		{
			MethodName: "MarkNewHeaviest",
			Handler:    _Msg_MarkNewHeaviest_Handler,
		},
		{
			MethodName: "NewRequest",
			Handler:    _Msg_NewRequest_Handler,
		},
		{
			MethodName: "ProvideProof",
			Handler:    _Msg_ProvideProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg_services.proto",
}
